---
// src/pages/articles/index.astro
import DashboardLayout from "../../layouts/DashboardLayout.astro";
import ArticleModal from "../../components/articles/ArticleModal.astro";
import { db } from "../../db";
import { eq } from "drizzle-orm";
import { articleTable } from "../../db/schema/articles";
import { relationTable } from "@/db/schema";
import type { Article } from "@/db/schema/articles";

// Define type for article with relation
type ArticleWithRelation = Article & {
    relation: {
        id: string;
        shortName: string;
        name: string;
    };
};

// Fetch all relations for the filter dropdown
const relations = await db
    .select({
        id: relationTable.id,
        shortName: relationTable.shortName,
        name: relationTable.name,
    })
    .from(relationTable)
    .where(eq(relationTable.isSupplier, true));

// Fetch articles with relations
const articles = await db.query.articleTable.findMany({
    with: {
        relation: {
            columns: {
                id: true,
                shortName: true,
                name: true,
            },
        },
    },
    columns: {
        id: true,
        articleCode: true,
        description: true,
        relationId: true,
        groupNumber: true,
        groupName: true,
        price: true,
        grossPrice: true,
        priceInclBtw: true,
        stock: true,
        isActive: true,
        eanCode: true,
        oemNumber: true,
        shortText: true,
        manufacturer: true,
        unit: true,
        vatRate: true,
    },
    orderBy: [articleTable.articleCode],
}) as ArticleWithRelation[];

// Get unique categories and groups
const categories = [...new Set(articles.map((a) => a.businessCategory).filter(Boolean))];
const groups = [...new Set(articles.map((a) => a.groupName).filter(Boolean))];
---

<DashboardLayout title="Articles">
    <div class="space-y-4">
        <!-- Header -->
        <div class="flex justify-between items-center py-4">
            <h1 class="text-2xl">Articles Management</h1>
            <button
                id="create-article-button"
                class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md flex items-center gap-2"
            >
                <span class="material-icons text-sm">add</span>
                Create New Article
            </button>
        </div>

        <!-- Store initial data -->
        <script id="article-data" type="application/json" set:html={JSON.stringify(articles)}>
        </script>

        <!-- Filters -->
        <div class="mb-4 flex gap-4">
            <input
                type="text"
                id="searchInput"
                placeholder="Search articles by code or description..."
                class="flex-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <select
                id="relationFilter"
                class="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
                <option value="">All Suppliers</option>
                {
                    relations.map((relation) => (
                        <option value={relation.id}>
                            {relation.shortName}
                        </option>
                    ))
                }
            </select>
            <select
                id="categoryFilter"
                class="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
                <option value="">All Categories</option>
                {
                    categories.map((category) => (
                        <option value={category}>{category}</option>
                    ))
                }
            </select>
            <select
                id="groupFilter"
                class="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
                <option value="">All Groups</option>
                {groups.map((group) => <option value={group}>{group}</option>)}
            </select>
        </div>

        <!-- Articles Table -->
        <div class="bg-white rounded-lg shadow">
            <div class="overflow-x-auto">
                <table class="min-w-full">
                    <thead>
                        <tr class="bg-gray-50 border-b">
                            <th
                                class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase"
                            >
                                Article Number
                            </th>
                            <th
                                class="py-4 px-4 text-center text-sm font-semibold text-[#1e518b] uppercase"
                            >
                                Status
                            </th>
                            <th
                                class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase"
                            >
                                Description
                            </th>
                            <th
                                class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase"
                            >
                               Main Supplier
                            </th>
                            <th
                                class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase"
                            >
                                Group
                            </th> 
                            <th
                            class="py-4 px-4 text-left text-sm font-semibold text-[#1e518b] uppercase"
                            >
                                Group Name
                            </th>
                            <th
                                class="py-4 px-4 text-right text-sm font-semibold text-[#1e518b] uppercase"
                            >
                                Gross Sales Price
                            </th>
                            <th
                                class="py-4 px-4 text-right text-sm font-semibold text-[#1e518b] uppercase"
                            >
                                Stock
                            </th>
                            
                            <th
                                class="py-4 px-4 text-right text-sm font-semibold text-[#1e518b] uppercase"
                            >
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-100">
                        {
                            articles.map((article) => (
                                <tr
                                    class="hover:bg-gray-50"
                                    data-relation-id={article.relationId}
                                    data-category={article.businessCategory}
                                    data-group={article.groupName}
                                >
                                    <td class="px-4 py-3.5 text-sm text-gray-900">
                                        {article.articleCode}
                                    </td>
                                    <td class="px-4 py-3.5 text-sm text-center">
                                        <span
                                            class:list={[
                                                "px-2 py-1 rounded-full text-xs",
                                                {
                                                    "bg-green-100 text-green-800": article.isActive,
                                                    "bg-gray-100 text-gray-800": !article.isActive
                                                }
                                            ]}
                                        >
                                            {article.isActive ? "Active" : "Inactive"}
                                        </span>
                                    </td>
                                    <td class="px-4 py-3.5 text-sm text-gray-900">
                                        {article.description}
                                    </td>
                                    <td class="px-4 py-3.5 text-sm text-gray-900">
                                        {article.relation.shortName}
                                    </td>
                                    <td class="px-4 py-3.5 text-sm text-gray-900">
                                        {article.groupNumber}
                                    </td>
                                    <td class="px-4 py-3.5 text-sm text-gray-900">
                                        {article.groupName}
                                    </td>
                                    <td class="px-4 py-3.5 text-sm text-gray-900 text-right">
                                        {new Intl.NumberFormat("nl-NL", {
                                            style: "currency",
                                            currency: "EUR",
                                        }).format(Number(article.price))}
                                    </td>
                                    <td class="px-4 py-3.5 text-sm text-right">
                                        <span
                                            class:list={[
                                                "px-2 py-1 rounded-full text-xs",
                                                {
                                                    "bg-green-100 text-green-800": (article.stock ?? 0) > 10,
                                                    "bg-yellow-100 text-yellow-800": (article.stock ?? 0) > 0 && (article.stock ?? 0) <= 10,
                                                    "bg-red-100 text-red-800": (article.stock ?? 0) <= 0
                                                }
                                            ]}
                                        >
                                            {article.stock}
                                        </span>
                                    </td>
                                    
                                    <td class="px-4 py-3.5 text-right">
                                        <div class="flex justify-end gap-2">
                                            <button
                                                class="text-[#1e518b] hover:text-blue-700 p-1 rounded-full hover:bg-blue-50"
                                                data-action="view"
                                                data-id={article.id}
                                            >
                                                <span class="material-icons">
                                                    visibility
                                                </span>
                                            </button>
                                            <button
                                                class="text-[#1e518b] hover:text-blue-700 p-1 rounded-full hover:bg-blue-50"
                                                data-action="edit"
                                                data-id={article.id}
                                            >
                                                <span class="material-icons">
                                                    edit
                                                </span>
                                            </button>
                                        
                                        </div>
                                    </td>
                                </tr>
                            ))
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Article Modal -->
    <ArticleModal />
</DashboardLayout>

<script>
    import { 
        handleView, 
        handleEdit, 
        articles, 
        selectedArticle,
        modalState 
    } from "../../store/articleStore";

    // Initialize the store with the server data
    const dataElement = document.getElementById('article-data');
    if (dataElement?.textContent) {
        const initialData = JSON.parse(dataElement.textContent);
        articles.set(initialData);
    }

    // Handle button actions
    document.querySelectorAll("[data-action]").forEach((button) => {
        button.addEventListener("click", async (e) => {
            const target = e.currentTarget as HTMLButtonElement;
            const action = target.dataset.action;
            const id = target.dataset.id;

            if (!id) return;

            const article = articles.get().find((a) => a.id === id);
            if (!article) {
                console.warn("No article found for id:", id);
                return;
            }

            switch (action) {
                case "view":
                    try {
                        const response = await fetch(`/api/articles/${id}`);
                        if (!response.ok) {
                            throw new Error('Failed to fetch article details');
                        }
                        const data = await response.json();
                        if (data.success) {
                            handleView(data.data);
                        }
                    } catch (error) {
                        console.error('Error fetching article:', error);
                        modalState.setKey('error', 'Failed to load article details');
                    }
                    break;
                case "edit":
                    handleEdit(article);
                    break;
            }
        });
    });

    // Search and Filter functionality
    const searchInput = document.getElementById("searchInput") as HTMLInputElement;
    const relationFilter = document.getElementById("relationFilter") as HTMLSelectElement;
    const categoryFilter = document.getElementById("categoryFilter") as HTMLSelectElement;
    const groupFilter = document.getElementById("groupFilter") as HTMLSelectElement;
    const rows = document.querySelectorAll("tbody tr");

    function filterTable() {
        const searchTerm = searchInput.value.toLowerCase();
        const relationId = relationFilter.value;
        const category = categoryFilter.value;
        const group = groupFilter.value;

        rows.forEach((row) => {
            const articleCode = (row as HTMLTableRowElement).cells[0].textContent?.toLowerCase() || "";
            const description = (row as HTMLTableRowElement).cells[1].textContent?.toLowerCase() || "";
            const rowRelationId = row.getAttribute("data-relation-id");
            const rowCategory = row.getAttribute("data-category");
            const rowGroup = row.getAttribute("data-group");

            const matchesSearch = articleCode.includes(searchTerm) || 
                                description.includes(searchTerm);
            const matchesRelation = !relationId || rowRelationId === relationId;
            const matchesCategory = !category || rowCategory === category;
            const matchesGroup = !group || rowGroup === group;

            (row as HTMLTableRowElement).style.display =
                matchesSearch && matchesRelation && matchesCategory && matchesCategory ? "" : "none";
        });
    }

    searchInput?.addEventListener("input", filterTable);
    relationFilter?.addEventListener("change", filterTable);
    categoryFilter?.addEventListener("change", filterTable);
    groupFilter?.addEventListener("change", filterTable);

    // Create button action
    document.getElementById("create-article-button")?.addEventListener("click", () => {
        window.location.href = "/articles/create";
    });
</script>